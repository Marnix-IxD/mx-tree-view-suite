// AdvancedTreeSearchBar.tsx - Dynamic search bar with type-aware UI

import { ReactElement, createElement, Fragment, useMemo } from "react";
import classNames from "classnames";
import { Icon } from "../../icons/Icon";
import { DynamicValue, WebIcon } from "mendix";
import { SearchUIMode, IAdvancedSearchState } from "../../hooks/useAdvancedTreeSearch";
import { SearchAttributeType } from "../../types/SearchTypes";
import { getOperatorsForType } from "../../utils/filterListAdapter";

export interface IAdvancedTreeSearchBarProps {
    // Search state
    searchState: IAdvancedSearchState;
    availableModes: SearchUIMode[];
    hasMultipleTypes: boolean;

    // Search configuration
    primaryAttributeType?: SearchAttributeType;
    searchIcon?: DynamicValue<WebIcon>;
    searchPlaceholder?: string;
    isSearching: boolean;
    resultCount: number;

    // State setters
    onModeChange: (mode: SearchUIMode) => void;
    onOperatorChange: (operator: string) => void;
    onSearchValueChange: (value: string) => void;
    onSearchValue2Change: (value: string) => void;
    onCaseSensitiveChange: (value: boolean) => void;
    onEnumValuesChange: (values: string[]) => void;
    onBooleanValueChange: (value: boolean | null) => void;
    onSearch: () => void;
    onClear: () => void;

    // Enum options (if applicable)
    enumOptions?: Array<{ key: string; caption: string }>;

    // UI options
    className?: string;
    disabled?: boolean;
}

export function AdvancedTreeSearchBar(props: IAdvancedTreeSearchBarProps): ReactElement {
    const {
        searchState,
        availableModes,
        hasMultipleTypes,
        primaryAttributeType,
        searchIcon,
        searchPlaceholder,
        isSearching,
        resultCount,
        onModeChange,
        onOperatorChange,
        onSearchValueChange,
        onSearchValue2Change,
        onEnumValuesChange,
        onBooleanValueChange,
        onSearch,
        onClear,
        enumOptions,
        className,
        disabled
    } = props;

    // Get available operators for current mode
    const availableOperators = useMemo(() => {
        if (searchState.uiMode === "auto" || searchState.uiMode === "mixed") {
            return ["contains"]; // Simple for auto mode
        }

        const typeMap: Record<SearchUIMode, SearchAttributeType> = {
            string: "String",
            numeric: primaryAttributeType && ["Integer", "Long", "Decimal"].includes(primaryAttributeType) 
                ? primaryAttributeType 
                : "Integer", // Use actual type if provided
            date: "DateTime",
            boolean: "Boolean",
            enum: "Enum",
            auto: primaryAttributeType || "String", // Use primary type for auto mode
            mixed: "String"
        };

        const attributeType = typeMap[searchState.uiMode];
        return getOperatorsForType(attributeType);
    }, [searchState.uiMode, primaryAttributeType]);

    // Get operator display name
    const getOperatorDisplay = (operator: string): string => {
        const displays: Record<string, string> = {
            // String operators
            contains: "Contains",
            startsWith: "Starts with",
            endsWith: "Ends with",
            equals: "Equals",
            notEquals: "Not equals",
            regex: "Matches pattern",
            
            // Numeric operators (Mendix uses "greater" not "greaterThan")
            greater: "Greater than",
            less: "Less than",
            greaterOrEqual: "≥",
            lessOrEqual: "≤",
            between: "Between",
            
            // Date operators - these can be implemented using Mendix date functions
            before: "Before",
            after: "After",
            today: "Today",
            yesterday: "Yesterday",
            thisWeek: "This week",
            lastWeek: "Last week",
            thisMonth: "This month",
            lastMonth: "Last month",
            thisYear: "This year"
        };
        return displays[operator] || operator;
    };

    // Get mode icon
    const getModeIcon = (mode: SearchUIMode): string => {
        switch (mode) {
            case "string":
                return "🔤";
            case "numeric":
                return "🔢";
            case "date":
                return "📅";
            case "boolean":
                return "☑️";
            case "enum":
                return "📋";
            case "mixed":
                return "🔍";
            default:
                return "🔍";
        }
    };

    // Render mode selector
    const renderModeSelector = () => {
        if (!hasMultipleTypes || availableModes.length <= 2) {
            return null;
        }

        return (
            <select
                className="mx-tree__search-mode-selector"
                value={searchState.uiMode}
                onChange={e => onModeChange(e.target.value as SearchUIMode)}
                disabled={disabled}
            >
                {availableModes.map(mode => (
                    <option key={mode} value={mode}>
                        {getModeIcon(mode)} {mode.charAt(0).toUpperCase() + mode.slice(1)}
                    </option>
                ))}
            </select>
        );
    };

    // Render operator selector
    const renderOperatorSelector = () => {
        if (searchState.uiMode === "auto" || searchState.uiMode === "boolean") {
            return null;
        }

        return (
            <select
                className="mx-tree__search-operator-selector"
                value={searchState.selectedOperator}
                onChange={e => onOperatorChange(e.target.value)}
                disabled={disabled}
            >
                {availableOperators.map(op => (
                    <option key={op} value={op}>
                        {getOperatorDisplay(op)}
                    </option>
                ))}
            </select>
        );
    };

    // Render search input based on mode
    const renderSearchInput = () => {
        const { uiMode, selectedOperator } = searchState;

        // Boolean mode - radio buttons
        if (uiMode === "boolean") {
            return (
                <div className="mx-tree__search-boolean-group">
                    <label>
                        <input
                            type="radio"
                            name="booleanSearch"
                            checked={searchState.selectedBooleanValue === null}
                            onChange={() => onBooleanValueChange(null)}
                            disabled={disabled}
                        />
                        Any
                    </label>
                    <label>
                        <input
                            type="radio"
                            name="booleanSearch"
                            checked={searchState.selectedBooleanValue === true}
                            onChange={() => onBooleanValueChange(true)}
                            disabled={disabled}
                        />
                        True
                    </label>
                    <label>
                        <input
                            type="radio"
                            name="booleanSearch"
                            checked={searchState.selectedBooleanValue === false}
                            onChange={() => onBooleanValueChange(false)}
                            disabled={disabled}
                        />
                        False
                    </label>
                </div>
            );
        }

        // Enum mode - multi-select
        if (uiMode === "enum" && enumOptions && enumOptions.length > 0) {
            return (
                <div className="mx-tree__search-enum-dropdown">
                    <select
                        multiple
                        value={searchState.selectedEnumValues}
                        onChange={e => {
                            const selected = Array.from(e.target.selectedOptions, option => option.value);
                            onEnumValuesChange(selected);
                        }}
                        disabled={disabled}
                    >
                        {enumOptions.map(option => (
                            <option key={option.key} value={option.key}>
                                {option.caption}
                            </option>
                        ))}
                    </select>
                </div>
            );
        }

        // Date mode with date input
        if (uiMode === "date") {
            if (selectedOperator === "between") {
                return (
                    <Fragment>
                        <input
                            type="date"
                            className="mx-tree__search-date-input"
                            value={searchState.searchValue}
                            onChange={e => onSearchValueChange(e.target.value)}
                            disabled={disabled}
                        />
                        <span className="mx-tree__search-between-separator">and</span>
                        <input
                            type="date"
                            className="mx-tree__search-date-input"
                            value={searchState.searchValue2 || ""}
                            onChange={e => onSearchValue2Change(e.target.value)}
                            disabled={disabled}
                        />
                    </Fragment>
                );
            }

            // Date presets
            if (
                ["today", "yesterday", "thisWeek", "lastWeek", "thisMonth", "lastMonth", "thisYear"].includes(
                    selectedOperator
                )
            ) {
                return (
                    <button className="mx-tree__search-preset-button" onClick={onSearch} disabled={disabled}>
                        Apply {getOperatorDisplay(selectedOperator)}
                    </button>
                );
            }

            return (
                <input
                    type="date"
                    className="mx-tree__search-date-input"
                    value={searchState.searchValue}
                    onChange={e => onSearchValueChange(e.target.value)}
                    disabled={disabled}
                />
            );
        }

        // Numeric mode with between
        if (uiMode === "numeric" && selectedOperator === "between") {
            return (
                <Fragment>
                    <input
                        type="number"
                        className="mx-tree__search-number-input"
                        value={searchState.searchValue}
                        onChange={e => onSearchValueChange(e.target.value)}
                        placeholder="From"
                        disabled={disabled}
                    />
                    <span className="mx-tree__search-between-separator">and</span>
                    <input
                        type="number"
                        className="mx-tree__search-number-input"
                        value={searchState.searchValue2 || ""}
                        onChange={e => onSearchValue2Change(e.target.value)}
                        placeholder="To"
                        disabled={disabled}
                    />
                </Fragment>
            );
        }

        // Default text input for string, numeric (non-between), auto, mixed
        const inputType = uiMode === "numeric" ? "number" : "text";
        const placeholder =
            searchPlaceholder ||
            (uiMode === "numeric" ? "Enter number..." : uiMode === "auto" ? "Search all fields..." : "Search...");

        return (
            <input
                type={inputType}
                className="mx-tree__search-input"
                value={searchState.searchValue}
                onChange={e => onSearchValueChange(e.target.value)}
                onKeyDown={e => {
                    if (e.key === "Enter") {
                        onSearch();
                    }
                }}
                placeholder={placeholder}
                disabled={disabled}
            />
        );
    };

    return (
        <div className={classNames("mx-tree__search-bar mx-tree__search-bar--advanced", className)}>
            <div className="mx-tree__search-bar-controls">
                {/* Search icon */}
                <span className="mx-tree__search-icon">
                    <Icon icon={searchIcon} fallback="search" className="mx-tree__search-icon-svg" />
                </span>

                {/* Mode selector */}
                {renderModeSelector()}

                {/* Operator selector */}
                {renderOperatorSelector()}

                {/* Search input(s) */}
                {renderSearchInput()}

                {/* Search/Clear button */}
                {searchState.searchValue || searchState.selectedBooleanValue !== null ? (
                    <button
                        className="mx-tree__search-clear-button"
                        onClick={onClear}
                        disabled={disabled}
                        title="Clear search"
                    >
                        ✕
                    </button>
                ) : null}

                {/* Loading indicator */}
                {isSearching && (
                    <span className="mx-tree__search-loading">
                        <span className="mx-tree__search-spinner">⟳</span>
                    </span>
                )}
            </div>

            {/* Search description and results */}
            {searchState.searchDescription && (
                <div className="mx-tree__search-description">
                    {searchState.searchDescription}
                    {resultCount > 0 && ` (${resultCount} results)`}
                </div>
            )}
        </div>
    );
}
